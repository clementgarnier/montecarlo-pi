body Pi

  bool DEBUG = false;       # Pour trace de debogage
  #DEBUG = true;  

  ##################################################################
  # Variables et operations pour la manipulation d'un Point
  ##################################################################
  # Type fondamental : un point est représenté par ses coordonnées x et y.  

  procedure estDansCercle(Point p) returns bool b
  {      
    b = (p.x**2 + p.y**2 <= 1);
  }

  procedure genererPoint() returns Point p
  {
    p.x = random(); #mettre 1.0 pour tester les temps d'exécution
    p.y = random(); #mettre 1.0 pour tester les temps d'exécution
  }

  ##################################################################
  # Variables et operations pour la manipulation du sac de taches.
  ##################################################################

  sem mutex = 1;

  # Variables pour representer le sac de taches.
  int restant;
  int tailleTache = 100;
  
  procedure prendreTache()
  {
    P( mutex );
    restant -= tailleTache;
    V( mutex );
  }

  proc definirTailleTache( tt )
  { tailleTache = tt; }

  # Initialisation du sac de taches.
  procedure initSacDeTaches( int nbTaches )
  {
      if(nbTaches % tailleTache != 0) {
          printf("Le nombre de tâches doit être divisible par la taille du sac de tâches");
          stop(1);
      }
      restant = nbTaches;
  }

  # Retrait d'une tache du sac.
  procedure obtenirTache() returns bool disponible 
  {
      prendreTache();
      disponible = (restant > 0);
  }

  ##################################################
  # Autres operations auxiliaires.
  ##################################################

  external getenv(string[*]) returns string[2];

  procedure getNbProcs() returns int nbProcs
  {
     nbProcs = 1;
     if (getenv("MPD_PARALLEL") != "") {
       nbProcs = int(getenv("MPD_PARALLEL"));
    }
  }

  procedure calculPI(int nbPtsDansCercle, int nbPoints) returns real r
  {
    r = 4*(real(nbPtsDansCercle)/nbPoints);
  }
 
  procedure traiterPoint() returns bool estInclus 
  {
     Point p = genererPoint();
     estInclus = estDansCercle(p);
  }

  ##################################################
  # Version sequentielle.
  ##################################################

  proc calculS( nbPoints ) returns r
  {  
     if (DEBUG) {
       printf( "calculS( %d )\n", nbPoints );
     }

     int nbPtsDansCercle = 0;

     # Création des points et vérfication de position
     for [i = 1 to nbPoints] {
        Point p = genererPoint();
	if (estDansCercle(p)) {
	   nbPtsDansCercle++;
        }	     
     }  
     
     # Calcul de PI
     r = calculPI(nbPtsDansCercle, nbPoints);        
  }

  ##################################################
  # Version parallele iterative granularite fine.
  ##################################################

  proc calculPIF( nbPoints ) returns r
  {
     bool listeNbPoints[nbPoints] = ([nbPoints] false);
     int nbPtsDansCercle = 0;
    
     # Création des points et vérfication de position
     co [i = 1 to nbPoints]
        listeNbPoints[i] = traiterPoint();	      
     oc  

     for [j = 1 to nbPoints] {
        if (listeNbPoints[j])
        {
           nbPtsDansCercle += 1;
        }
     }
     
     # Calcul de PI
     r = calculPI(nbPtsDansCercle, nbPoints); 
  }


  ##################################################
  # Version parallele iterative granularite grossiere.
  ##################################################

  procedure traitementThread(int nbPtsTotThread) returns int nbPtsInclusCercle
  {
     if (DEBUG) {
       printf( "traitementThread( %d )\n", nbPtsTotThread );
     }
     nbPtsInclusCercle = 0;
     for [j = 1 to nbPtsTotThread]
     {
        if (traiterPoint())
        {
           nbPtsInclusCercle++;
        }
     }
  }

  proc calculPIGA( nbPoints ) returns r
  {
     int nbPtsDansCercle = 0;
     int nbProcs = getNbProcs();
     if (nbPoints%nbProcs > 0)
     {
        printf( "*** nbPoints doit être un multiple de nbProcs\n" );
        stop(1);
     }

     int lstNbPtsInclParThread[nbProcs] = ([nbProcs] 0);

     # Création des points et vérfication de position
     co [i = 1 to nbProcs]
        lstNbPtsInclParThread[i] = traitementThread(nbPoints/nbProcs);	      
     oc  
     
     for [k = 1 to nbProcs]
     {
        nbPtsDansCercle += lstNbPtsInclParThread[k];
     }
     
     # Calcul de PI
     r = calculPI(nbPtsDansCercle, nbPoints);  
  }

  ##################################################
  # Version parallele sac de taches.
  ##################################################

  procedure executerTache() returns int nb
  {
      nb = 0;
      while( obtenirTache() ) {
          nb += traitementThread(tailleTache);
      }
  }

  proc calculPST( nbPoints) returns r
  {
     int nbPtsDansCercle = 0;
     int nbProcs = getNbProcs();
     int nbTaches = nbPoints/tailleTache;

     int lstNbPtsInclParThread[nbProcs] = ([nbProcs] 0);
      
     initSacDeTaches(nbPoints);

     co[i = 1 to nbProcs]
        lstNbPtsInclParThread[i] = executerTache();
     oc

     for [k = 1 to nbProcs]
     {
        nbPtsDansCercle += lstNbPtsInclParThread[k];
     }

     # Calcul de PI
     r = calculPI(nbPtsDansCercle, nbPoints);
  }
end
