
# Module pour gérer des points dans un espace à deux dimensions.

global Geometrie()

    # Type fondamental : un point est représenté par ses coordonnées x et y.
    
    type Point = ptr PointRec;

    type PointRec = rec(
      real x;
      real y;
    );    

    procedure point(real x, real y) returns Point p
    {
      p = new(PointRec)
      p^.x = x;
      p^.y = y;
    }

    procedure estDansCercle(Point p) returns bool b
    {
      #if (p^.x < MIDDLE_EDGE & p^.y < MIDDLE_EDGE))
      #{
      #}
      #else if (p^.x < MIDDLE_EDGE & p^.y < MIDDLE_EDGE)
      #{
      #}
      #else
      #{       
         b = (p^.x**2 + p^.y**2 <= 1);
      #}
    }

    procedure initialiserPoint() returns Point p
    {
      p = new(PointRec);
      p^.x = random();
      p^.y = random();
    }
end
