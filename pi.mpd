#
# Module afin de calculer PI à l'aide de la méthode de Monte Carlo, en
# utilisant un nombre fixe de points avec coordonnées aléatoires sur un
# plan
#

global Pi

  #####################################################
  # Types d'objets pour les calculs.
  ####################################################
  type Point = rec(
    real x;
    real y;
  );

  #####################################################
  # Fonctions principales du programme.
  #####################################################

  op calculS(int nbPoints) returns real pi
  # CONTRAINTE
  #   Algorithme sequentiel iteratif.

  op calculPIF(int nbPoints) returns real pi
  # CONTRAINTE
  #   Algorithme avec parallelisme iteratif a granularite (tres) fine (sans recursion).

  op calculPIGA(int nbPoints) returns real pi
  # CONTRAINTE
  #   Algorithme avec parallelisme iteratif a granularite grossiere (sans recursion),
  #   avec distribution par tranche d'elements adjacents.

  op calculPST(int nbPoints) returns real pi
  # CONTRAINTE
  #   Algorithme avec parallelisme de style sac de taches.

  #####################################################
  # Operation auxiliaire pour parametre d'execution.
  #####################################################

  op definirTailleTache( int tt )
  # POSTCONDITION
  #   Indique la taille des taches pour l'operation calculPST.

  ##################################################################
  # Constantes utilisées pour les tests.
  ##################################################################

  const real PRECISION = 0.01;
  const real PI = 3.1415926535;
  const int  NB_POINTS = 200000;

body Pi separate
