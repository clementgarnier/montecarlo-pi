resource Barriere
  # Operation pour mise en attente a la barriere.
  op attendre()

  # Le nombre de processus impliques dans l'attente
  # a la barriere est specifie a la creation de la ressource
  # (parametre nbProcs).

body Barriere( int nbProcs )
  int nbArrives        = 0;
  int semAttenteActif  = 0;
   
  sem semMutex        = 1;
  sem semAttente[0:1] = ([2] 0);

  procedure prochainSemAttente( int n1 ) returns int r
  # Permet d'alterner entre semAttente[0] et semAttente[1].
  { r = 1 - n1; }

  proc attendre()
  {
    P(semMutex);
    nbArrives += 1;

    if (nbArrives < nbProcs) {
      # Encore d'autres processus qui ne sont pas arrives
      # => Mise en attente sur le semaphore semAttente actif.

      int actif = semAttenteActif;
      V(semMutex);
      P(semAttente[actif]);

    } else {
      # Tous les processus sont maintenant arrives.
      # On prepare les variables pour la prochaine vague.     
      nbArrives = 0;
      int ancienActif = semAttenteActif;
      semAttenteActif = prochainSemAttente(semAttenteActif);
      V(semMutex);

      # Puis on reactive les processus qui sont en attente
      # (i.e., on declenche la prochaine vague).
      for [i = 1 to nbProcs-1] {
        V(semAttente[ancienActif]);
      }
    }
  }
end
